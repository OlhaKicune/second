1)В чем отличие интерпретатора от компилятора?---Компиля́тор — программа или техническое средство, выполняющее компиляцию.
Компиля́ция — трансляция программы, составленной на исходном языке высокого уровня, в эквивалентную программу на низкоуровневом языке, близком машинному коду. Входной информацией для компилятора  является описание алгоритма или программа на предметно-ориентированном языке, а на выходе компилятора — эквивалентное описание алгоритма на машинно-ориентированном языке .

Интерпрета́тор — программа  выполняющая интерпретацию.
Интерпрета́ция — покомандный или построчный анализ, обработка и тут же выполнение исходной программы или запроса (в отличие от компиляции, при которой программа транслируется без её выполнения)
  

2)Что такое EcmaScript? Почему он так называется и кто занимается его развитием?--- ECMA-Расширения языка: JavaScript, JScript и ActionScript.ECMAScript — это встраиваемый расширяемый не имеющий средств ввода-вывода язык программирования,используемый в качестве основы для построения других скриптовых языков.

Кто разрабатывает ECMAScript---TC39 (Технический Комитет 39)это комитет, который занимается развитием JavaScript.Дважды прочла википедию и чтобы я что то поняла нет математика не мое !!! И если вы это понимаете снимаю шляпу!Вы молодец а я просто в тихом ужасе.....


3)Какие операции можно выполнять с NaN и Infinity?----NaN является неравным  любому другому значению, включая другое значение NaN. Используйте Number.isNaN() или isNaN(), чтобы наиболее понятным образом определить является ли значение значением NaN.Значение NaN обладает одной особенностью: оно не равно никакому значению, в том числе и другому NaN.
NaN сокращение от англ. Not a Number – не число- MОЙ МОЗГ КАЖЕТСЯ ВЫШЕЛ ЧЕРЕЗ УШИ -Я УВЕРЕНА ЧТО СТАНУ КОСМЕТОЛОГОМ!

Infinity не имеет числового представления и любая арифметическая операция с бесконечностью всегда возвращает бесконечность.В JavaScript имеется предопределённая глобальная переменная Infinity. Она хранит специальное значение обозначающее бесконечность – Infinity. Эта переменная доступна только для чтения.

4)Опишите все типы данных в JS.---

1.NUMBER-Единый тип число используется как для целых, так и для дробных чисел.
2.STRING-В JavaScript любые текстовые данные являются строками. Не существует отдельного типа «символ», который есть в ряде других   языков.
3.BOOLEAN-У него всего два значения: true -YES и false -NO.

4.NULL-Значение null не относится ни к одному из типов ,образует свой отдельный тип, состоящий из единственного значения null.Это просто специальное значение, которое имеет смысл «ничего» или «значение неизвестно».var age = null;--возраст не известно.

5.UNDEFINED-Значение undefined, как и null, образует свой собственный тип, состоящий из одного этого значения. Оно имеет смысл «значение не присвоено».
var x;
alert( x ); // выведет "undefined"
Если переменная объявлена, но в неё ничего не записано, то её значение как раз и есть undefined.

6.OBJECT-Он используется для коллекций данных и для объявления более сложных сущностей и объявляются объекты при помощи фигурных скобок {...}.var user = { name: "Вася" };

Есть 5 «примитивных» типов: number, string, boolean, null, undefined и 6-й тип – объекты object.
 
TYPEOF--Оператор typeof возвращает тип аргумента.

У него есть два синтаксиса: со скобками и без:

Синтаксис оператора: typeof x.
Синтаксис функции: typeof(x).
Работают они одинаково, но первый синтаксис короче.

Результатом typeof является строка, содержащая тип:

typeof undefined // "undefined"

typeof 0 // "number"

typeof true // "boolean"

typeof "foo" // "string"

typeof {} // "object"

Результат typeof null == "object" – это официально признанная ошибка в языке, которая сохраняется для совместимости. На самом деле null – это не объект, а отдельный тип данных.

typeof null // "object"  (1)

typeof function(){} // "function"  (2)
